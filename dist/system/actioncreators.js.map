{"version":3,"sources":["../../src/actioncreators.js"],"names":[],"mappings":";;;QAAa,cAAc;;;;;;;;;;;AAAd,0BAAc;6BAAd,cAAc;;2BACR,kBAAC,KAAK,EAAE,UAAU,EAAE;AAC/B,4BAAI,cAAc,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;AACpD,8BAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE;AAC3B,oDAAwB,EAAE;AACtB,4CAAY,EAAE,KAAK;AACnB,wCAAQ,EAAE,KAAK;AACf,0CAAU,EAAE,KAAK;AACjB,qCAAK,EAAE,cAAc;6BACxB;AACD,sCAAU,EAAE;AACR,mCAAG,EAAE,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC;AACtD,mCAAG,EAAE,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC;6BACzD;AACD,oCAAQ,EAAE;AACN,4CAAY,EAAE,KAAK;AACnB,wCAAQ,EAAE,KAAK;AACf,0CAAU,EAAE,KAAK;AACjB,qCAAK,EAAE,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;6BACtD;yBACJ,CAAC,CAAC;qBACN;;;AAEU,yBAvBF,cAAc,CAuBX,UAAU,EAAE,OAAO,EAAE;0CAvBxB,cAAc;;AAwBnB,wBAAI,UAAU,EAAE;AACZ,4BAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;qBAClC;AACD,wBAAI,OAAO,EAAE;AACT,8BAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;qBAChC;iBACJ;;6BA9BQ,cAAc;;2BAgCV,uBAAC,UAAU,EAAE;AACtB,4BAAI,CAAC,UAAU,GAAG,UAAU,CAAC;qBAChC;;;2BAEY,yBAAG;AACZ,+BAAO,IAAI,CAAC,UAAU,CAAC;qBAC1B;;;;;;;;;2BAOO,kBAAC,UAAU,EAAE;;;AACjB,4BAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjC,+BAAO,eAAA,IAAI,CAAC,UAAU,EAAC,QAAQ,MAAA,eAAC,UAAU,4BAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC;qBACjE;;;2BAEyB,6BAAC,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE;AACvD,+BAAO,YAAW;;;AACd,gCAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjC,sCAAU,CAAC,QAAQ,MAAA,CAAnB,UAAU,GAAa,UAAU,yCAAe,IAAI,GAAC,CAAC;;AAEtD,mCAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,sCAAM,CAAC,IAAI,MAAA,CAAX,MAAM,oCAAe,IAAI,GAAC,CAAC,IAAI,CAC3B,UAAC,MAAM,EAAK;AACR,wCAAI,MAAM,EAAE;AACR,4CAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qCACxB;AACD,8CAAU,CAAC,QAAQ,MAAA,CAAnB,UAAU,GAAa,UAAU,2CAAiB,IAAI,GAAC,CAAC,IAAI,CAAC,YAAM;AAC/D,+CAAO,CAAC,MAAM,CAAC,CAAC;qCACnB,CAAC,CAAC;iCACN,EACD,UAAC,KAAK,EAAK;AACP,wCAAI,KAAK,EAAE;AACP,4CAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qCACvB;AACD,8CAAU,CAAC,QAAQ,MAAA,CAAnB,UAAU,GAAa,UAAU,wCAAc,IAAI,GAAC,CAAC,IAAI,CAAC,YAAM;AAC5D,8CAAM,CAAC,KAAK,CAAC,CAAC;qCACjB,CAAC,CAAC;iCACN,CACJ,CAAC;6BACL,CAAC,CAAC;yBACN,CAAC;qBACL;;;uBA5EQ,cAAc;;;;;+BA+EZ,cAAc","file":"actioncreators.js","sourcesContent":["export class ActionCreators {\n    static decorate(owner, dispatcher) {\n        var actionCreators = new ActionCreators(dispatcher);\n        Object.defineProperties(owner, {\n            _actionCreatorsDecorator: {\n                configurable: false,\n                writable: false,\n                enumerable: false,\n                value: actionCreators\n            },\n            dispatcher: {\n                get: actionCreators.getDispatcher.bind(actionCreators),\n                set: actionCreators.setDispatcher.bind(actionCreators)\n            },\n            dispatch: {\n                configurable: false,\n                writable: false,\n                enumerable: false,\n                value: actionCreators.dispatch.bind(actionCreators)\n            }\n        });\n    }\n\n    constructor(dispatcher, actions) {\n        if (dispatcher) {\n            this.setDispatcher(dispatcher);\n        }\n        if (actions) {\n            Object.assign(this, actions);\n        }\n    }\n\n    setDispatcher(dispatcher) {\n        this.dispatcher = dispatcher;\n    }\n\n    getDispatcher() {\n        return this.dispatcher;\n    }\n\n    /**\n     * Dispatches an action to the dispatcher defined on this Actions\n     *\n     * @return { Promise } A promise to be resolved when all the callbacks have finised.\n     */\n    dispatch(actionType) {\n        var args = Array.from(arguments);\n        return this.dispatcher.dispatch(actionType, ...args.slice(1));\n    }\n\n    static createServiceAction(dispatcher, actionType, action) {\n        return function() {\n            var args = Array.from(arguments);\n            dispatcher.dispatch(`${actionType}_STARTED`, ...args);\n\n            return new Promise((resolve, reject) => {\n                action.call(this, ...args).then(\n                    (result) => {\n                        if (result) {\n                            args.unshift(result);\n                        }\n                        dispatcher.dispatch(`${actionType}_COMPLETED`, ...args).then(() => {\n                            resolve(result);\n                        });\n                    },\n                    (error) => {\n                        if (error) {\n                            args.unshift(error);\n                        }\n                        dispatcher.dispatch(`${actionType}_FAILED`, ...args).then(() => {\n                            reject(error);\n                        });\n                    }\n                );\n            });\n        };\n    }\n}\n\nexport default ActionCreators;\n"]}